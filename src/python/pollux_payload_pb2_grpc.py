# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pollux_payload_pb2 as pollux__payload__pb2
import pollux_pb2 as pollux__pb2


class PolluxPayloadStub(object):
    """Pollux server from Payload side
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PolluxCommunication = channel.unary_unary(
                '/pollux.PolluxPayload/PolluxCommunication',
                request_serializer=pollux__pb2.PolluxMessage.SerializeToString,
                response_deserializer=pollux__pb2.PolluxMessageResponse.FromString,
                )
        self.Start = channel.unary_unary(
                '/pollux.PolluxPayload/Start',
                request_serializer=pollux__payload__pb2.PayloadStartMessage.SerializeToString,
                response_deserializer=pollux__payload__pb2.PayloadStartResponse.FromString,
                )
        self.Terminate = channel.unary_unary(
                '/pollux.PolluxPayload/Terminate',
                request_serializer=pollux__payload__pb2.PayloadTerminateMessage.SerializeToString,
                response_deserializer=pollux__payload__pb2.PayloadTerminateResponse.FromString,
                )


class PolluxPayloadServicer(object):
    """Pollux server from Payload side
    """

    def PolluxCommunication(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Terminate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PolluxPayloadServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PolluxCommunication': grpc.unary_unary_rpc_method_handler(
                    servicer.PolluxCommunication,
                    request_deserializer=pollux__pb2.PolluxMessage.FromString,
                    response_serializer=pollux__pb2.PolluxMessageResponse.SerializeToString,
            ),
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=pollux__payload__pb2.PayloadStartMessage.FromString,
                    response_serializer=pollux__payload__pb2.PayloadStartResponse.SerializeToString,
            ),
            'Terminate': grpc.unary_unary_rpc_method_handler(
                    servicer.Terminate,
                    request_deserializer=pollux__payload__pb2.PayloadTerminateMessage.FromString,
                    response_serializer=pollux__payload__pb2.PayloadTerminateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pollux.PolluxPayload', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PolluxPayload(object):
    """Pollux server from Payload side
    """

    @staticmethod
    def PolluxCommunication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pollux.PolluxPayload/PolluxCommunication',
            pollux__pb2.PolluxMessage.SerializeToString,
            pollux__pb2.PolluxMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pollux.PolluxPayload/Start',
            pollux__payload__pb2.PayloadStartMessage.SerializeToString,
            pollux__payload__pb2.PayloadStartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Terminate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pollux.PolluxPayload/Terminate',
            pollux__payload__pb2.PayloadTerminateMessage.SerializeToString,
            pollux__payload__pb2.PayloadTerminateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PolluxletPayloadStub(object):
    """Pollux Payload server from Polluxlet side
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PayloadReady = channel.unary_unary(
                '/pollux.PolluxletPayload/PayloadReady',
                request_serializer=pollux__payload__pb2.PayloadReadyMessage.SerializeToString,
                response_deserializer=pollux__payload__pb2.PayloadReadyResponse.FromString,
                )
        self.PayloadInactive = channel.unary_unary(
                '/pollux.PolluxletPayload/PayloadInactive',
                request_serializer=pollux__payload__pb2.PayloadInactiveMessage.SerializeToString,
                response_deserializer=pollux__payload__pb2.PayloadInactiveResponse.FromString,
                )
        self.PolluxCommunication = channel.unary_unary(
                '/pollux.PolluxletPayload/PolluxCommunication',
                request_serializer=pollux__pb2.PolluxMessage.SerializeToString,
                response_deserializer=pollux__pb2.PolluxMessageResponse.FromString,
                )


class PolluxletPayloadServicer(object):
    """Pollux Payload server from Polluxlet side
    """

    def PayloadReady(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PayloadInactive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PolluxCommunication(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PolluxletPayloadServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PayloadReady': grpc.unary_unary_rpc_method_handler(
                    servicer.PayloadReady,
                    request_deserializer=pollux__payload__pb2.PayloadReadyMessage.FromString,
                    response_serializer=pollux__payload__pb2.PayloadReadyResponse.SerializeToString,
            ),
            'PayloadInactive': grpc.unary_unary_rpc_method_handler(
                    servicer.PayloadInactive,
                    request_deserializer=pollux__payload__pb2.PayloadInactiveMessage.FromString,
                    response_serializer=pollux__payload__pb2.PayloadInactiveResponse.SerializeToString,
            ),
            'PolluxCommunication': grpc.unary_unary_rpc_method_handler(
                    servicer.PolluxCommunication,
                    request_deserializer=pollux__pb2.PolluxMessage.FromString,
                    response_serializer=pollux__pb2.PolluxMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pollux.PolluxletPayload', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PolluxletPayload(object):
    """Pollux Payload server from Polluxlet side
    """

    @staticmethod
    def PayloadReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pollux.PolluxletPayload/PayloadReady',
            pollux__payload__pb2.PayloadReadyMessage.SerializeToString,
            pollux__payload__pb2.PayloadReadyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PayloadInactive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pollux.PolluxletPayload/PayloadInactive',
            pollux__payload__pb2.PayloadInactiveMessage.SerializeToString,
            pollux__payload__pb2.PayloadInactiveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PolluxCommunication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pollux.PolluxletPayload/PolluxCommunication',
            pollux__pb2.PolluxMessage.SerializeToString,
            pollux__pb2.PolluxMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
